@model IEnumerable<InventoryManagement.Models.Item>
@{
    Layout = "PageLayout";  // Apply the new layout for pages with sidebar and footer
}

@{
    ViewData["Title"] = "Item Management";
}
<div class="main-content">
    <h1 class="text-center">Item Management</h1>

<div class="d-flex justify-content-between mb-3">
    <!-- Stock Management Button (left side, only for Manager and Supplier) -->
    <div>
        @if (User.IsInRole("Manager") || User.IsInRole("Supplier"))
        {
            <a asp-action="StockMovements" class="btn btn-primary">Stock Management</a> <!-- Links to stock movements page -->
        }
    </div>

    <!-- Create New Item Button (right side, only for Manager) -->
    <div>
        @if (User.IsInRole("Manager"))
        {
            <a asp-action="Create" class="btn btn-success">Create New Item</a>
        }
    </div>
</div>


<!-- Alert Message Display (if available) -->
@if (ViewData["AlertMessage"] != null)
{
    <div class="alert alert-danger">
        @ViewData["AlertMessage"]
    </div>
}
@if (TempData["LowStockAlert"] != null)
{
    <div class="alert alert-warning">
        @TempData["LowStockAlert"]
    </div>
}


<!-- Table displaying all items -->
<div class="table-container">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Quantity)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Price)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LowStockThreshold)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Supplier)
                </th>
                <th>
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <!-- Add conditional class if stock is low -->
                <tr class="@(item.Quantity <= item.LowStockThreshold ? "bg-danger text-white" : "")">
                    <td>@Html.DisplayFor(modelItem => item.Name)</td>
                    <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                    <td>@Html.DisplayFor(modelItem => item.Price)</td>
                    <td>@Html.DisplayFor(modelItem => item.LowStockThreshold)</td>
                    <td>@Html.DisplayFor(modelItem => item.Supplier.Name)</td>
                    <td>
                        @if (User.IsInRole("Manager"))
                        {
                            <a asp-action="Edit" asp-route-id="@item.ItemID" class="btn btn-warning">Edit</a>
                            <a asp-action="Delete" asp-route-id="@item.ItemID" class="btn btn-danger">Delete</a>
                        }
                        <a asp-action="Details" asp-route-id="@item.ItemID" class="btn btn-info">Details</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
</div>

<script>
    $(document).ready(function () {
        // Check if there's an alert
        var alertMessage = $('#lowStockAlert');
        if (alertMessage.length > 0) {
            // Set a timeout to hide the alert after 5 seconds (5000ms)
            setTimeout(function () {
                alertMessage.fadeOut(1000); // Fade out the alert in 1 second
            }, 5000); // Delay in milliseconds (5000ms = 5 seconds)
        }
    });
</script>
